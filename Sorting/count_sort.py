# 각 데이터가 몇 번 등장하는지 개수를 세서 리스트에 기록한다. ⇒ 그 후, 그 개수만큼 해당 데이터를 출력한다
# 데이터의 크기 범위가 제한되어 정수 형태로 표현할 수 있을 때 사용 가능합니다.
# 동일한 값을 가지는 데이터가 여러 개 등장할 때 효과적으로 사용할 수 있습니다.
# 시간복잡도: O(N+K) / 공간복잡도: O(N+K) ... N=데이터의 개수 K=데이터 중 최댓값

# 모든 원소의 값이 0보다 크거나 같다고 가정
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]

# 모든 범위를 포함하는 리스트 선언 (모든 값은 0으로 초기화)
count = [0] * (max(array)+1)

# 복잡도 N
for n in array:
  count[n] += 1 # 각 데이터에 해당하는 인덱스의 값 증가

# 복잡도 N + K
for i in range(len(count)): # 리스트에 기록된 정렬 정보 확인
  for j in range(count[i]): 
    print(i, end=" ") # 띄어쓰기를 구분으로 등장한 횟수만큼 인덱스 출력